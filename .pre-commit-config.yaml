# Pre-commit hooks configuration for AI Instagram Publisher
# This file defines automated checks that run before each commit

repos:
  # Linting with ruff (faster alternative to flake8)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.1.9
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.8.0
    hooks:
      - id: mypy
        additional_dependencies: [types-requests, types-python-dateutil]
        args: [--ignore-missing-imports, --no-strict-optional]

  # Security scanning with bandit
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # General pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      # File formatting and cleanup
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-json
      - id: check-toml
      - id: check-xml
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-symlinks
      - id: check-executables-have-shebangs
      
      # Python-specific checks
      - id: check-ast
      - id: check-builtin-literals
      - id: check-docstring-first
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      
      # Security and sensitive data checks
      - id: detect-private-key
      - id: check-added-large-files
        args: [--maxkb=1000]

  # Documentation checks
  - repo: https://github.com/pycqa/pydocstyle
    rev: 6.3.0
    hooks:
      - id: pydocstyle
        args: [--convention=google, --add-ignore=D100,D101,D102,D103,D104,D105,D107]

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: ^(tests/|\.env\.example$)

  # Additional Python quality checks
  - repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
      - id: flake8
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear
          - flake8-comprehensions
          - flake8-simplify
        args: [--max-line-length=100, --extend-ignore=E203,W503,D100,D101,D102,D103,D104,D105,D107]

  # Dockerfile linting (if we add Docker later)
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        files: Dockerfile.*

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck

  # Custom security checks for this project
  - repo: local
    hooks:
      # Check for hardcoded API keys
      - id: check-api-keys
        name: Check for hardcoded API keys
        entry: python -c "
import re
import sys
import os

patterns = [
    r'sk-[a-zA-Z0-9]{48}',  # OpenAI API keys
    r'AKIA[0-9A-Z]{16}',    # AWS Access Keys
    r'AIza[0-9A-Za-z\\-_]{35}',  # Google API keys
]

def check_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            for pattern in patterns:
                if re.search(pattern, content):
                    print(f'Potential API key found in {filepath}')
                    return False
    except (UnicodeDecodeError, IOError):
        pass
    return True

files = sys.argv[1:]
if not files:
    sys.exit(0)

all_good = True
for filepath in files:
    if not check_file(filepath):
        all_good = False

sys.exit(0 if all_good else 1)
"
        language: system
        files: \.(py|js|ts|json|yaml|yml|env)$
        exclude: ^(\.env\.example$|tests/)

      # Check for TODO/FIXME comments in production code
      - id: check-todos
        name: Check for TODO/FIXME in production code
        entry: python -c "
import sys
import re

def check_file(filepath):
    if 'test' in filepath.lower():
        return True
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            lines = f.readlines()
            for i, line in enumerate(lines, 1):
                if re.search(r'(TODO|FIXME|XXX|HACK)', line, re.IGNORECASE):
                    print(f'{filepath}:{i}: Found TODO/FIXME comment: {line.strip()}')
                    return False
    except (UnicodeDecodeError, IOError):
        pass
    return True

files = sys.argv[1:]
if not files:
    sys.exit(0)

all_good = True
for filepath in files:
    if not check_file(filepath):
        all_good = False

sys.exit(0 if all_good else 1)
"
        language: system
        files: \.(py)$
        exclude: ^tests/

      # Validate configuration files
      - id: validate-config
        name: Validate configuration structure
        entry: python -c "
import sys
import os
sys.path.insert(0, '.')

try:
    from config import get_config
    config = get_config()
    print('✅ Configuration validation passed')
except Exception as e:
    print(f'❌ Configuration validation failed: {e}')
    sys.exit(1)
"
        language: system
        files: ^(config\.py|\.env\.example)$
        pass_filenames: false

      # Check for proper logging usage
      - id: check-logging
        name: Check for proper logging usage
        entry: python -c "
import re
import sys

def check_file(filepath):
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
            # Check for print statements (should use logging instead)
            if re.search(r'^[^#]*print\s*\(', content, re.MULTILINE):
                print(f'Found print() statement in {filepath}, consider using logging instead')
                return False
    except (UnicodeDecodeError, IOError):
        pass
    return True

files = sys.argv[1:]
if not files:
    sys.exit(0)

all_good = True
for filepath in files:
    if 'test' not in filepath.lower() and filepath.endswith('.py'):
        if not check_file(filepath):
            all_good = False

sys.exit(0 if all_good else 1)
"
        language: system
        files: \.(py)$
        exclude: ^(tests/|main\.py$)

# Configuration for specific tools
default_language_version:
  python: python3.11

# Global settings
fail_fast: false
default_stages: [commit]

# Exclude patterns
exclude: |
  (?x)^(
    \.git/|
    \.venv/|
    venv/|
    __pycache__/|
    \.pytest_cache/|
    \.mypy_cache/|
    \.ruff_cache/|
    build/|
    dist/|
    \.eggs/|
    generated_content/|
    logs/|
    .*\.log$|
    bandit-report\.json$
  )